package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.module.modules.movement.BugUp
import net.ccbluex.liquidbounce.features.module.modules.world.Timer
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0APacketAnimation
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S00PacketKeepAlive
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*
import kotlin.collections.HashMap
import kotlin.concurrent.fixedRateTimer
import kotlin.math.sqrt

@ModuleInfo(name = "Disabler", description = "Disabled Anti-cheat", category = ModuleCategory.EXPLOIT)
class Disabler: Module(){
    private val mode = ListValue("Mode", arrayOf("Timer","Minemora","Debug","Custom","Mineland"),"Timer")
    private val blockS08 = BoolValue("BlockS08",false)
    private val blockC0F = BoolValue("BlockC0F",false)
    private val cancelC0F = BoolValue("CancelC0F",false)
    private val cancelC00 = BoolValue("CancelC00",false)
    private val cancelC04 = BoolValue("CancelC04",false)
    private val sendC0F = BoolValue("SendC0f",false)
//    private val sendC0A = BoolValue("SendC0A",false)
    private val sendS08 = BoolValue("SendS08",false)
    private val debug = BoolValue("Debug",false)
    private val reduceFlag = BoolValue("ReduceFlag",false)


    // Bypass
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>> () // Maybe I will use this...
    private val packetsMap = HashMap<Packet<*>, Long>()
    private val s08PacketBus = LinkedList<S08PacketPlayerPosLook> ()
    private val c0fPacketBus = LinkedList<C0FPacketConfirmTransaction> ()
    private val antivoidMap = LinkedList<Packet<*>>()
    private var s08tick = 0
    private val antivoid = LiquidBounce.moduleManager.getModule(BugUp::class.java) as BugUp
    private val timer = LiquidBounce.moduleManager.getModule(Timer::class.java) as Timer

    override fun onEnable() {
        packetsMap.clear()
        antivoidMap.clear()
        s08PacketBus.clear()
        c0fPacketBus.clear()
        s08tick = 0
    }

    override fun onDisable() {
        packetsMap.clear()
        antivoidMap.clear()
        s08PacketBus.clear()
        c0fPacketBus.clear()
        s08tick = 0
    }

    @EventTarget
    fun onPacket(event: PacketEvent){
        val packet = event.packet
        when (mode.get().toLowerCase()){
            "custom" ->{
                if (sendS08.get()) {
                    mc.thePlayer.sendQueue.addToSendQueue(S08PacketPlayerPosLook())
                    sendS08.set(false)
                }

                if (packet is C03PacketPlayer.C04PacketPlayerPosition && cancelC04.get())
                    event.cancelEvent()

                if (packet is S08PacketPlayerPosLook && reduceFlag.get()) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        PacketUtils.sendPacketNoEvent(
                            C03PacketPlayer.C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )
                    }
                }

                if (blockS08.get() && packet is S08PacketPlayerPosLook){
                    event.cancelEvent()
                    s08PacketBus.add(packet)
                    if (debug.get())
                        debugText(this.name,"Added S08")
                }
                if (blockC0F.get() && packet is C0FPacketConfirmTransaction){
                    event.cancelEvent()
                    c0fPacketBus.add(packet)
                    if (debug.get())
                        debugText(this.name,"Added C0F")
                    if (sendC0F.get())
                        mc.thePlayer.sendQueue.addToSendQueue(C0FPacketConfirmTransaction())
                }
                if (cancelC0F.get() && packet is C0FPacketConfirmTransaction){
                    event.cancelEvent()
                    if (sendC0F.get())
                        mc.thePlayer.sendQueue.addToSendQueue(C0FPacketConfirmTransaction())
                }
                if (cancelC00.get() && packet is C00PacketKeepAlive)
                    event.cancelEvent()

//                if (sendC0A.get())
//                    mc.thePlayer.sendQueue.addToSendQueue(C0APacketAnimation())

            }
            "timer" -> {
                if (packet is C00PacketKeepAlive){
                    event.cancelEvent()

                    synchronized(packetsMap){
                        packetsMap.put(packet, System.currentTimeMillis() + 5000)
                    }
                }

                if (packet is C0FPacketConfirmTransaction){
                    event.cancelEvent()
                    PacketUtils.sendPacketNoEvent(C0FPacketConfirmTransaction())
                }

                if (debug.get() && packet is S08PacketPlayerPosLook){
                    debugText(this.name,"S08PacketPlayerPosLook(${packet.x},${packet.y},${packet.z},${packet.yaw},${packet.pitch})")
                }
            }
            "mineland" -> {

                if (packet is S08PacketPlayerPosLook && reduceFlag.get()) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    if (diff <= 8) {
                        event.cancelEvent()
                        PacketUtils.sendPacketNoEvent(
                            C03PacketPlayer.C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                            )
                        )
                    }
                }

                if (packet is C0FPacketConfirmTransaction) {
                    event.cancelEvent()
                    if (debug.get())
                        debugText(this.name,"Cancel C0F")
                }
                if (packet is S08PacketPlayerPosLook){
                    if (packet is C00PacketKeepAlive) {
                        event.cancelEvent()
                        if (debug.get())
                            debugText(this.name,"Cancel C00")
                    }
                }

            }
            "debug" -> {
                if (debug.get() && packet is S08PacketPlayerPosLook){
                    debugText(this.name,"S08PacketPlayerPosLook(${packet.x},${packet.y},${packet.z},${packet.yaw},${packet.pitch})")
                }
            }
            "minemora" -> {

                if (debug.get() && packet is S08PacketPlayerPosLook){
                    debugText(this.name,"S08PacketPlayerPosLook(${packet.x},${packet.y},${packet.z},${packet.yaw},${packet.pitch})")
                }

                if (antivoid.state){
                    if (packet is S08PacketPlayerPosLook){
                        event.cancelEvent()

                        antivoidMap.add(packet)
                        if (debug.get()){
                            debugText(this.name,"AntiVoid added S08")
                        }
                    }
                }

                if (!antivoid.state){
                    antivoidMap.clear()
                }

            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent?) {
        when (mode.get().toLowerCase()){
            "timer" -> {
                try {
                    synchronized(packetsMap) {
                        val iterator: MutableIterator<Map.Entry<Packet<*>, Long>> =
                            packetsMap.entries.iterator()
                        while (iterator.hasNext()) {
                            val (key, value) = iterator.next()
                            if (value < System.currentTimeMillis()) {
                                mc.netHandler.addToSendQueue(key)
                                iterator.remove()
                            }
                        }
                    }
                } catch (t: Throwable) {
                    t.printStackTrace()
                }
            }
            "minemora" -> {
                mc.netHandler.addToSendQueue(C0APacketAnimation())
            }
            "debug" -> {
                packetsMap.clear()
            }
            "mineland" -> {
                if (timer.state) {
                    when (s08tick) {
                        1 -> {
                            mc.thePlayer.sendQueue.addToSendQueue(S08PacketPlayerPosLook())
                            s08tick++
                            if (debug.get())
                                debugText(this.name,"SendS08 x1")
                        }
                        2 -> {
                            mc.thePlayer.sendQueue.addToSendQueue(S08PacketPlayerPosLook())
                            s08tick++
                            if (debug.get())
                                debugText(this.name,"SendS08 x2")
                        }
                    }
                }else if (!timer.state){
                    s08tick = 0
                }
            }
        }
    }
}